import React, { useState } from "react";
import { db } from "../../firebase"; // Firebase configuration
import { collection, addDoc } from "firebase/firestore";

const ExamForm = () => {
  const [department, setDepartment] = useState("");
  const [session, setSession] = useState("");
  const [courseCode, setCourseCode] = useState("");
  const [startTime, setStartTime] = useState("");
  const [endTime, setEndTime] = useState("");
  const [questions, setQuestions] = useState([{ questionText: "", options: ["", "", "", ""], correctAnswer: "" }]);

  // Handle adding a question
  const addQuestion = () => {
    setQuestions([...questions, { questionText: "", options: ["", "", "", ""], correctAnswer: "" }]);
  };

  // Handle removing a question
  const removeQuestion = (index) => {
    const newQuestions = questions.filter((_, i) => i !== index);
    setQuestions(newQuestions);
  };

  // Handle change in question or options
  const handleQuestionChange = (index, field, value) => {
    const newQuestions = [...questions];
    if (field === "questionText") {
      newQuestions[index].questionText = value;
    } else if (field === "correctAnswer") {
      newQuestions[index].correctAnswer = value;
    } else {
      newQuestions[index].options[parseInt(field)] = value;
    }
    setQuestions(newQuestions);
  };

  // Handle exam submission
  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const examData = {
        department,
        session,
        courseCode,
        startTime,
        endTime,
        questions,
      };

      // Save exam data to Firebase Firestore
      const docRef = await addDoc(collection(db, "exams"), examData);
      
      // Get the examId (document ID generated by Firestore)
      const examId = docRef.id;

      alert("Exam Created Successfully! Exam ID: " + examId);
      
      // Reset form fields after submission
      setDepartment("");
      setSession("");
      setCourseCode("");
      setStartTime("");
      setEndTime("");
      setQuestions([{ questionText: "", options: ["", "", "", ""], correctAnswer: "" }]);
    } catch (error) {
      console.error("Error adding document: ", error);
    }
  };

  return (
    <div className="container">
      <h2>Create Exam Form</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Department"
          value={department}
          onChange={(e) => setDepartment(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Session"
          value={session}
          onChange={(e) => setSession(e.target.value)}
          required
        />
        <input
          type="text"
          placeholder="Course Code"
          value={courseCode}
          onChange={(e) => setCourseCode(e.target.value)}
          required
        />
        <input
          type="datetime-local"
          value={startTime}
          onChange={(e) => setStartTime(e.target.value)}
          required
        />
        <input
          type="datetime-local"
          value={endTime}
          onChange={(e) => setEndTime(e.target.value)}
          required
        />

        <h3>Questions</h3>
        {questions.map((question, index) => (
          <div key={index} className="question">
            <input
              type="text"
              placeholder="Question"
              value={question.questionText}
              onChange={(e) => handleQuestionChange(index, "questionText", e.target.value)}
              required
            />
            <div>
              {question.options.map((option, i) => (
                <input
                  key={i}
                  type="text"
                  placeholder={`Option ${i + 1}`}
                  value={option}
                  onChange={(e) => handleQuestionChange(index, i, e.target.value)}
                  required
                />
              ))}
            </div>
            <input
              type="text"
              placeholder="Correct Answer"
              value={question.correctAnswer}
              onChange={(e) => handleQuestionChange(index, "correctAnswer", e.target.value)}
              required
            />
            <button type="button" onClick={() => removeQuestion(index)}>Remove Question</button>
          </div>
        ))}

        <button type="button" onClick={addQuestion}>Add Question</button>
        <button type="submit">Submit Exam</button>
      </form>
    </div>
  );
};

export default ExamForm;
